/* tslint:disable */
/* eslint-disable */
/*
Coinprofile business API

Coinprofile business API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { VoucherCreatePayment400Response } from '../models';
// @ts-ignore
import { VoucherCreatePaymentRequest } from '../models';
// @ts-ignore
import { VoucherCreatePaymentResponse } from '../models';
// @ts-ignore
import { VoucherGetMultipleRecords400Response } from '../models';
// @ts-ignore
import { VoucherGetMultipleRecordsResponse } from '../models';
// @ts-ignore
import { VoucherGetRecord404Response } from '../models';
// @ts-ignore
import { VoucherGetRecordResponse } from '../models';
// @ts-ignore
import { VoucherRedeemAndWithdraw400Response } from '../models';
// @ts-ignore
import { VoucherRedeemAndWithdraw404Response } from '../models';
// @ts-ignore
import { VoucherRedeemAndWithdrawRequest } from '../models';
// @ts-ignore
import { VoucherRedeemAndWithdrawResponse } from '../models';
// @ts-ignore
import { VoucherRedeemExistingUnused400Response } from '../models';
// @ts-ignore
import { VoucherRedeemExistingUnused404Response } from '../models';
// @ts-ignore
import { VoucherRedeemExistingUnusedRequest } from '../models';
// @ts-ignore
import { VoucherRedeemExistingUnusedResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VoucherApi - axios parameter creator
 * @export
 */
export const VoucherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new voucher payment for a user
         * @summary Create a new voucher payment
         * @param {VoucherCreatePaymentRequest} voucherCreatePaymentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment: async (voucherCreatePaymentRequest: VoucherCreatePaymentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voucherCreatePaymentRequest' is not null or undefined
            assertParamExists('createPayment', 'voucherCreatePaymentRequest', voucherCreatePaymentRequest)
            const localVarPath = `/v1/vouchers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: voucherCreatePaymentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/vouchers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(voucherCreatePaymentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a collection of voucher records, sorted in descending order by their creation date.
         * @summary Get multiple records
         * @param {number} [page] Defaults to 1. This is the current page being requested relative to size of a page
         * @param {number} [pageSize] The number of items to be retured per page
         * @param {'paid' | 'unpaid'} [paymentStatus] Voucher payment status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleRecords: async (page?: number, pageSize?: number, paymentStatus?: 'paid' | 'unpaid', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/voucher/get-many`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paymentStatus !== undefined) {
                localVarQueryParameter['paymentStatus'] = paymentStatus;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/voucher/get-many',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an existing voucher record(s). When no query param is provided, all the voucher record for the merchant will be returned. If accountNumber field is provided in the query, all the voucher records associated with the given accountNumber for the merchant will be returned.
         * @summary Retrieve voucher record
         * @param {string} [id] Voucher id
         * @param {string} [memo] Voucher memo or reference number
         * @param {string} [accountNumber] The account number used to pay for voucher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord: async (id?: string, memo?: string, accountNumber?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/vouchers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (memo !== undefined) {
                localVarQueryParameter['memo'] = memo;
            }

            if (accountNumber !== undefined) {
                localVarQueryParameter['accountNumber'] = accountNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/vouchers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redeems an existing unused voucher and transfers crypto to the provided wallet address
         * @summary Redeem and withdraw
         * @param {VoucherRedeemAndWithdrawRequest} voucherRedeemAndWithdrawRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemAndWithdraw: async (voucherRedeemAndWithdrawRequest: VoucherRedeemAndWithdrawRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voucherRedeemAndWithdrawRequest' is not null or undefined
            assertParamExists('redeemAndWithdraw', 'voucherRedeemAndWithdrawRequest', voucherRedeemAndWithdrawRequest)
            const localVarPath = `/v1/voucher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: voucherRedeemAndWithdrawRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/voucher',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(voucherRedeemAndWithdrawRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redeems an existing unused voucher
         * @summary Redeem existing unused voucher
         * @param {VoucherRedeemExistingUnusedRequest} voucherRedeemExistingUnusedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemExistingUnused: async (voucherRedeemExistingUnusedRequest: VoucherRedeemExistingUnusedRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voucherRedeemExistingUnusedRequest' is not null or undefined
            assertParamExists('redeemExistingUnused', 'voucherRedeemExistingUnusedRequest', voucherRedeemExistingUnusedRequest)
            const localVarPath = `/v1/vouchers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: voucherRedeemExistingUnusedRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/vouchers',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(voucherRedeemExistingUnusedRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VoucherApi - functional programming interface
 * @export
 */
export const VoucherApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VoucherApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new voucher payment for a user
         * @summary Create a new voucher payment
         * @param {VoucherApiCreatePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPayment(requestParameters: VoucherApiCreatePaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoucherCreatePaymentResponse>> {
            const voucherCreatePaymentRequest: VoucherCreatePaymentRequest = {
                amount: requestParameters.amount,
                currency: requestParameters.currency,
                email: requestParameters.email,
                fullname: requestParameters.fullname,
                rateKey: requestParameters.rateKey
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPayment(voucherCreatePaymentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a collection of voucher records, sorted in descending order by their creation date.
         * @summary Get multiple records
         * @param {VoucherApiGetMultipleRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMultipleRecords(requestParameters: VoucherApiGetMultipleRecordsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoucherGetMultipleRecordsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMultipleRecords(requestParameters.page, requestParameters.pageSize, requestParameters.paymentStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves an existing voucher record(s). When no query param is provided, all the voucher record for the merchant will be returned. If accountNumber field is provided in the query, all the voucher records associated with the given accountNumber for the merchant will be returned.
         * @summary Retrieve voucher record
         * @param {VoucherApiGetRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecord(requestParameters: VoucherApiGetRecordRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoucherGetRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecord(requestParameters.id, requestParameters.memo, requestParameters.accountNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Redeems an existing unused voucher and transfers crypto to the provided wallet address
         * @summary Redeem and withdraw
         * @param {VoucherApiRedeemAndWithdrawRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redeemAndWithdraw(requestParameters: VoucherApiRedeemAndWithdrawRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoucherRedeemAndWithdrawResponse>> {
            const voucherRedeemAndWithdrawRequest: VoucherRedeemAndWithdrawRequest = {
                cryptoAddress: requestParameters.cryptoAddress,
                currency: requestParameters.currency,
                email: requestParameters.email,
                merchantFee: requestParameters.merchantFee,
                network: requestParameters.network,
                rateKey: requestParameters.rateKey,
                voucherCode: requestParameters.voucherCode
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.redeemAndWithdraw(voucherRedeemAndWithdrawRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Redeems an existing unused voucher
         * @summary Redeem existing unused voucher
         * @param {VoucherApiRedeemExistingUnusedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redeemExistingUnused(requestParameters: VoucherApiRedeemExistingUnusedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoucherRedeemExistingUnusedResponse>> {
            const voucherRedeemExistingUnusedRequest: VoucherRedeemExistingUnusedRequest = {
                email: requestParameters.email,
                voucherCode: requestParameters.voucherCode
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.redeemExistingUnused(voucherRedeemExistingUnusedRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VoucherApi - factory interface
 * @export
 */
export const VoucherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VoucherApiFp(configuration)
    return {
        /**
         * Creates a new voucher payment for a user
         * @summary Create a new voucher payment
         * @param {VoucherApiCreatePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment(requestParameters: VoucherApiCreatePaymentRequest, options?: AxiosRequestConfig): AxiosPromise<VoucherCreatePaymentResponse> {
            return localVarFp.createPayment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a collection of voucher records, sorted in descending order by their creation date.
         * @summary Get multiple records
         * @param {VoucherApiGetMultipleRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleRecords(requestParameters: VoucherApiGetMultipleRecordsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<VoucherGetMultipleRecordsResponse> {
            return localVarFp.getMultipleRecords(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an existing voucher record(s). When no query param is provided, all the voucher record for the merchant will be returned. If accountNumber field is provided in the query, all the voucher records associated with the given accountNumber for the merchant will be returned.
         * @summary Retrieve voucher record
         * @param {VoucherApiGetRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord(requestParameters: VoucherApiGetRecordRequest = {}, options?: AxiosRequestConfig): AxiosPromise<VoucherGetRecordResponse> {
            return localVarFp.getRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Redeems an existing unused voucher and transfers crypto to the provided wallet address
         * @summary Redeem and withdraw
         * @param {VoucherApiRedeemAndWithdrawRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemAndWithdraw(requestParameters: VoucherApiRedeemAndWithdrawRequest, options?: AxiosRequestConfig): AxiosPromise<VoucherRedeemAndWithdrawResponse> {
            return localVarFp.redeemAndWithdraw(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Redeems an existing unused voucher
         * @summary Redeem existing unused voucher
         * @param {VoucherApiRedeemExistingUnusedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemExistingUnused(requestParameters: VoucherApiRedeemExistingUnusedRequest, options?: AxiosRequestConfig): AxiosPromise<VoucherRedeemExistingUnusedResponse> {
            return localVarFp.redeemExistingUnused(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPayment operation in VoucherApi.
 * @export
 * @interface VoucherApiCreatePaymentRequest
 */
export type VoucherApiCreatePaymentRequest = {
    
} & VoucherCreatePaymentRequest

/**
 * Request parameters for getMultipleRecords operation in VoucherApi.
 * @export
 * @interface VoucherApiGetMultipleRecordsRequest
 */
export type VoucherApiGetMultipleRecordsRequest = {
    
    /**
    * Defaults to 1. This is the current page being requested relative to size of a page
    * @type {number}
    * @memberof VoucherApiGetMultipleRecords
    */
    readonly page?: number
    
    /**
    * The number of items to be retured per page
    * @type {number}
    * @memberof VoucherApiGetMultipleRecords
    */
    readonly pageSize?: number
    
    /**
    * Voucher payment status
    * @type {'paid' | 'unpaid'}
    * @memberof VoucherApiGetMultipleRecords
    */
    readonly paymentStatus?: 'paid' | 'unpaid'
    
}

/**
 * Request parameters for getRecord operation in VoucherApi.
 * @export
 * @interface VoucherApiGetRecordRequest
 */
export type VoucherApiGetRecordRequest = {
    
    /**
    * Voucher id
    * @type {string}
    * @memberof VoucherApiGetRecord
    */
    readonly id?: string
    
    /**
    * Voucher memo or reference number
    * @type {string}
    * @memberof VoucherApiGetRecord
    */
    readonly memo?: string
    
    /**
    * The account number used to pay for voucher
    * @type {string}
    * @memberof VoucherApiGetRecord
    */
    readonly accountNumber?: string
    
}

/**
 * Request parameters for redeemAndWithdraw operation in VoucherApi.
 * @export
 * @interface VoucherApiRedeemAndWithdrawRequest
 */
export type VoucherApiRedeemAndWithdrawRequest = {
    
} & VoucherRedeemAndWithdrawRequest

/**
 * Request parameters for redeemExistingUnused operation in VoucherApi.
 * @export
 * @interface VoucherApiRedeemExistingUnusedRequest
 */
export type VoucherApiRedeemExistingUnusedRequest = {
    
} & VoucherRedeemExistingUnusedRequest

/**
 * VoucherApiGenerated - object-oriented interface
 * @export
 * @class VoucherApiGenerated
 * @extends {BaseAPI}
 */
export class VoucherApiGenerated extends BaseAPI {
    /**
     * Creates a new voucher payment for a user
     * @summary Create a new voucher payment
     * @param {VoucherApiCreatePaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherApiGenerated
     */
    public createPayment(requestParameters: VoucherApiCreatePaymentRequest, options?: AxiosRequestConfig) {
        return VoucherApiFp(this.configuration).createPayment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a collection of voucher records, sorted in descending order by their creation date.
     * @summary Get multiple records
     * @param {VoucherApiGetMultipleRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherApiGenerated
     */
    public getMultipleRecords(requestParameters: VoucherApiGetMultipleRecordsRequest = {}, options?: AxiosRequestConfig) {
        return VoucherApiFp(this.configuration).getMultipleRecords(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves an existing voucher record(s). When no query param is provided, all the voucher record for the merchant will be returned. If accountNumber field is provided in the query, all the voucher records associated with the given accountNumber for the merchant will be returned.
     * @summary Retrieve voucher record
     * @param {VoucherApiGetRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherApiGenerated
     */
    public getRecord(requestParameters: VoucherApiGetRecordRequest = {}, options?: AxiosRequestConfig) {
        return VoucherApiFp(this.configuration).getRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Redeems an existing unused voucher and transfers crypto to the provided wallet address
     * @summary Redeem and withdraw
     * @param {VoucherApiRedeemAndWithdrawRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherApiGenerated
     */
    public redeemAndWithdraw(requestParameters: VoucherApiRedeemAndWithdrawRequest, options?: AxiosRequestConfig) {
        return VoucherApiFp(this.configuration).redeemAndWithdraw(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Redeems an existing unused voucher
     * @summary Redeem existing unused voucher
     * @param {VoucherApiRedeemExistingUnusedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherApiGenerated
     */
    public redeemExistingUnused(requestParameters: VoucherApiRedeemExistingUnusedRequest, options?: AxiosRequestConfig) {
        return VoucherApiFp(this.configuration).redeemExistingUnused(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
