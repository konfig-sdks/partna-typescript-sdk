/* tslint:disable */
/* eslint-disable */
/*
Coinprofile business API

Coinprofile business API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { WalletExecuteTransferRequest } from '../models';
// @ts-ignore
import { WalletExecuteTransferResponse } from '../models';
// @ts-ignore
import { WalletGetAddressesResponse } from '../models';
// @ts-ignore
import { WalletGetSupportedConfigResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WalletApi - axios parameter creator
 * @export
 */
export const WalletApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Transfer crypto from one wallet address to another
         * @summary Wallet transfer
         * @param {WalletExecuteTransferRequest} walletExecuteTransferRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeTransfer: async (walletExecuteTransferRequest: WalletExecuteTransferRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletExecuteTransferRequest' is not null or undefined
            assertParamExists('executeTransfer', 'walletExecuteTransferRequest', walletExecuteTransferRequest)
            const localVarPath = `/wallet/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })
            // authentication UserVersion required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-User-Version", keyParamName: "userVersion", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: walletExecuteTransferRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/wallet/transfer',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(walletExecuteTransferRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get wallet
         * @summary Retrieves a user\'s crypto wallet addresses
         * @param {string} [currency] The cryptocurrency for which address will be retrieved
         * @param {string} [network] The crypto network of the retrieved wallet address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddresses: async (currency?: string, network?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wallet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })
            // authentication UserVersion required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-User-Version", keyParamName: "userVersion", configuration })
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (network !== undefined) {
                localVarQueryParameter['network'] = network;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/wallet',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get supported cryptocurrencies and networks
         * @summary Get supported cryptocurrencies and network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportedConfig: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wallet/supported/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/wallet/supported/config',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalletApi - functional programming interface
 * @export
 */
export const WalletApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WalletApiAxiosParamCreator(configuration)
    return {
        /**
         * Transfer crypto from one wallet address to another
         * @summary Wallet transfer
         * @param {WalletApiExecuteTransferRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeTransfer(requestParameters: WalletApiExecuteTransferRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletExecuteTransferResponse>> {
            const walletExecuteTransferRequest: WalletExecuteTransferRequest = {
                address: requestParameters.address,
                amount: requestParameters.amount,
                currency: requestParameters.currency,
                memo: requestParameters.memo,
                network: requestParameters.network,
                walletType: requestParameters.walletType
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeTransfer(walletExecuteTransferRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get wallet
         * @summary Retrieves a user\'s crypto wallet addresses
         * @param {WalletApiGetAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddresses(requestParameters: WalletApiGetAddressesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletGetAddressesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddresses(requestParameters.currency, requestParameters.network, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get supported cryptocurrencies and networks
         * @summary Get supported cryptocurrencies and network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSupportedConfig(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletGetSupportedConfigResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSupportedConfig(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WalletApi - factory interface
 * @export
 */
export const WalletApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WalletApiFp(configuration)
    return {
        /**
         * Transfer crypto from one wallet address to another
         * @summary Wallet transfer
         * @param {WalletApiExecuteTransferRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeTransfer(requestParameters: WalletApiExecuteTransferRequest, options?: AxiosRequestConfig): AxiosPromise<WalletExecuteTransferResponse> {
            return localVarFp.executeTransfer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * get wallet
         * @summary Retrieves a user\'s crypto wallet addresses
         * @param {WalletApiGetAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddresses(requestParameters: WalletApiGetAddressesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<WalletGetAddressesResponse> {
            return localVarFp.getAddresses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get supported cryptocurrencies and networks
         * @summary Get supported cryptocurrencies and network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportedConfig(options?: AxiosRequestConfig): AxiosPromise<WalletGetSupportedConfigResponse> {
            return localVarFp.getSupportedConfig(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for executeTransfer operation in WalletApi.
 * @export
 * @interface WalletApiExecuteTransferRequest
 */
export type WalletApiExecuteTransferRequest = {
    
} & WalletExecuteTransferRequest

/**
 * Request parameters for getAddresses operation in WalletApi.
 * @export
 * @interface WalletApiGetAddressesRequest
 */
export type WalletApiGetAddressesRequest = {
    
    /**
    * The cryptocurrency for which address will be retrieved
    * @type {string}
    * @memberof WalletApiGetAddresses
    */
    readonly currency?: string
    
    /**
    * The crypto network of the retrieved wallet address
    * @type {string}
    * @memberof WalletApiGetAddresses
    */
    readonly network?: string
    
}

/**
 * WalletApiGenerated - object-oriented interface
 * @export
 * @class WalletApiGenerated
 * @extends {BaseAPI}
 */
export class WalletApiGenerated extends BaseAPI {
    /**
     * Transfer crypto from one wallet address to another
     * @summary Wallet transfer
     * @param {WalletApiExecuteTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiGenerated
     */
    public executeTransfer(requestParameters: WalletApiExecuteTransferRequest, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).executeTransfer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get wallet
     * @summary Retrieves a user\'s crypto wallet addresses
     * @param {WalletApiGetAddressesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiGenerated
     */
    public getAddresses(requestParameters: WalletApiGetAddressesRequest = {}, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).getAddresses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get supported cryptocurrencies and networks
     * @summary Get supported cryptocurrencies and network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiGenerated
     */
    public getSupportedConfig(options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).getSupportedConfig(options).then((request) => request(this.axios, this.basePath));
    }
}
