/* tslint:disable */
/* eslint-disable */
/*
Coinprofile business API

Coinprofile business API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TransactionGetDetailsResponse } from '../models';
// @ts-ignore
import { TransactionGetUserTransactionSummaryResponse } from '../models';
// @ts-ignore
import { TransactionGetUserTransactionsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TransactionApi - axios parameter creator
 * @export
 */
export const TransactionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a transaction
         * @summary Get a transaction
         * @param {string} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (transactionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('getDetails', 'transactionId', transactionId)
            const localVarPath = `/transaction/{transactionId}`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId !== undefined ? transactionId : `-transactionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })
            // authentication UserVersion required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-User-Version", keyParamName: "userVersion", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/transaction/{transactionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all user transactions summary
         * @summary Retrieve user\'s transaction summary
         * @param {'NGN' | 'USD'} [currency] Currency for which transactions are to be retrieved. When this is not supplied, transactions will be retrieved for all available currencies.
         * @param {'deposit' | 'withdrawal' | 'sent' | 'transfer' | 'internalTransfer' | 'conversion'} [type] Type of transactions to be retrieved. When this is not supplied, transactions will be retrieved for all available types.
         * @param {number} [page] Number of pages to be retrieved.
         * @param {number} [limit] Number of transaction records to be retrieved per page page.
         * @param {'one day' | 'one week' | 'one month' | 'one year'} [duration] Duration of the transaction to be retrieved per page page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTransactionSummary: async (currency?: 'NGN' | 'USD', type?: 'deposit' | 'withdrawal' | 'sent' | 'transfer' | 'internalTransfer' | 'conversion', page?: number, limit?: number, duration?: 'one day' | 'one week' | 'one month' | 'one year', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transaction/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })
            // authentication UserVersion required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-User-Version", keyParamName: "userVersion", configuration })
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/transaction/summary',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all user transactions
         * @summary Retrieve user\'s transaction records
         * @param {'NGN' | 'USD'} [currency] Currency for which transactions are to be retrieved. When this is not supplied, transactions will be retrieved for all available currencies.
         * @param {'deposit' | 'withdrawal' | 'sent' | 'transfer' | 'internalTransfer' | 'conversion'} [type] Type of transactions to be retrieved. When this is not supplied, transactions will be retrieved for all available types.
         * @param {number} [page] Number of pages to be retrieved.
         * @param {number} [limit] Number of transaction records to be retrieved per page page.
         * @param {'one day' | 'one week' | 'one month' | 'one year'} [duration] Duration of the transaction to be retrieved per page page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTransactions: async (currency?: 'NGN' | 'USD', type?: 'deposit' | 'withdrawal' | 'sent' | 'transfer' | 'internalTransfer' | 'conversion', page?: number, limit?: number, duration?: 'one day' | 'one week' | 'one month' | 'one year', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })
            // authentication UserVersion required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-User-Version", keyParamName: "userVersion", configuration })
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/transaction',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionApi - functional programming interface
 * @export
 */
export const TransactionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a transaction
         * @summary Get a transaction
         * @param {TransactionApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: TransactionApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionGetDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.transactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all user transactions summary
         * @summary Retrieve user\'s transaction summary
         * @param {TransactionApiGetUserTransactionSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserTransactionSummary(requestParameters: TransactionApiGetUserTransactionSummaryRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionGetUserTransactionSummaryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserTransactionSummary(requestParameters.currency, requestParameters.type, requestParameters.page, requestParameters.limit, requestParameters.duration, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all user transactions
         * @summary Retrieve user\'s transaction records
         * @param {TransactionApiGetUserTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserTransactions(requestParameters: TransactionApiGetUserTransactionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionGetUserTransactionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserTransactions(requestParameters.currency, requestParameters.type, requestParameters.page, requestParameters.limit, requestParameters.duration, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TransactionApi - factory interface
 * @export
 */
export const TransactionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionApiFp(configuration)
    return {
        /**
         * Get a transaction
         * @summary Get a transaction
         * @param {TransactionApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: TransactionApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<TransactionGetDetailsResponse> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all user transactions summary
         * @summary Retrieve user\'s transaction summary
         * @param {TransactionApiGetUserTransactionSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTransactionSummary(requestParameters: TransactionApiGetUserTransactionSummaryRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TransactionGetUserTransactionSummaryResponse> {
            return localVarFp.getUserTransactionSummary(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all user transactions
         * @summary Retrieve user\'s transaction records
         * @param {TransactionApiGetUserTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTransactions(requestParameters: TransactionApiGetUserTransactionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TransactionGetUserTransactionsResponse> {
            return localVarFp.getUserTransactions(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDetails operation in TransactionApi.
 * @export
 * @interface TransactionApiGetDetailsRequest
 */
export type TransactionApiGetDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TransactionApiGetDetails
    */
    readonly transactionId: string
    
}

/**
 * Request parameters for getUserTransactionSummary operation in TransactionApi.
 * @export
 * @interface TransactionApiGetUserTransactionSummaryRequest
 */
export type TransactionApiGetUserTransactionSummaryRequest = {
    
    /**
    * Currency for which transactions are to be retrieved. When this is not supplied, transactions will be retrieved for all available currencies.
    * @type {'NGN' | 'USD'}
    * @memberof TransactionApiGetUserTransactionSummary
    */
    readonly currency?: 'NGN' | 'USD'
    
    /**
    * Type of transactions to be retrieved. When this is not supplied, transactions will be retrieved for all available types.
    * @type {'deposit' | 'withdrawal' | 'sent' | 'transfer' | 'internalTransfer' | 'conversion'}
    * @memberof TransactionApiGetUserTransactionSummary
    */
    readonly type?: 'deposit' | 'withdrawal' | 'sent' | 'transfer' | 'internalTransfer' | 'conversion'
    
    /**
    * Number of pages to be retrieved.
    * @type {number}
    * @memberof TransactionApiGetUserTransactionSummary
    */
    readonly page?: number
    
    /**
    * Number of transaction records to be retrieved per page page.
    * @type {number}
    * @memberof TransactionApiGetUserTransactionSummary
    */
    readonly limit?: number
    
    /**
    * Duration of the transaction to be retrieved per page page.
    * @type {'one day' | 'one week' | 'one month' | 'one year'}
    * @memberof TransactionApiGetUserTransactionSummary
    */
    readonly duration?: 'one day' | 'one week' | 'one month' | 'one year'
    
}

/**
 * Request parameters for getUserTransactions operation in TransactionApi.
 * @export
 * @interface TransactionApiGetUserTransactionsRequest
 */
export type TransactionApiGetUserTransactionsRequest = {
    
    /**
    * Currency for which transactions are to be retrieved. When this is not supplied, transactions will be retrieved for all available currencies.
    * @type {'NGN' | 'USD'}
    * @memberof TransactionApiGetUserTransactions
    */
    readonly currency?: 'NGN' | 'USD'
    
    /**
    * Type of transactions to be retrieved. When this is not supplied, transactions will be retrieved for all available types.
    * @type {'deposit' | 'withdrawal' | 'sent' | 'transfer' | 'internalTransfer' | 'conversion'}
    * @memberof TransactionApiGetUserTransactions
    */
    readonly type?: 'deposit' | 'withdrawal' | 'sent' | 'transfer' | 'internalTransfer' | 'conversion'
    
    /**
    * Number of pages to be retrieved.
    * @type {number}
    * @memberof TransactionApiGetUserTransactions
    */
    readonly page?: number
    
    /**
    * Number of transaction records to be retrieved per page page.
    * @type {number}
    * @memberof TransactionApiGetUserTransactions
    */
    readonly limit?: number
    
    /**
    * Duration of the transaction to be retrieved per page page.
    * @type {'one day' | 'one week' | 'one month' | 'one year'}
    * @memberof TransactionApiGetUserTransactions
    */
    readonly duration?: 'one day' | 'one week' | 'one month' | 'one year'
    
}

/**
 * TransactionApiGenerated - object-oriented interface
 * @export
 * @class TransactionApiGenerated
 * @extends {BaseAPI}
 */
export class TransactionApiGenerated extends BaseAPI {
    /**
     * Get a transaction
     * @summary Get a transaction
     * @param {TransactionApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiGenerated
     */
    public getDetails(requestParameters: TransactionApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return TransactionApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all user transactions summary
     * @summary Retrieve user\'s transaction summary
     * @param {TransactionApiGetUserTransactionSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiGenerated
     */
    public getUserTransactionSummary(requestParameters: TransactionApiGetUserTransactionSummaryRequest = {}, options?: AxiosRequestConfig) {
        return TransactionApiFp(this.configuration).getUserTransactionSummary(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all user transactions
     * @summary Retrieve user\'s transaction records
     * @param {TransactionApiGetUserTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiGenerated
     */
    public getUserTransactions(requestParameters: TransactionApiGetUserTransactionsRequest = {}, options?: AxiosRequestConfig) {
        return TransactionApiFp(this.configuration).getUserTransactions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
