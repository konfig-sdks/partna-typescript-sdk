/* tslint:disable */
/* eslint-disable */
/*
Coinprofile business API

Coinprofile business API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { VoucherMinmaxAmountGetMinMaxAmountResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VoucherMinMaxAmountApi - axios parameter creator
 * @export
 */
export const VoucherMinMaxAmountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves minimum and maximum voucher amounts for each currency.
         * @summary Retrieves minimum and maximum voucher amounts
         * @param {'NGN' | 'USD'} [currency] Voucher currency
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMinMaxAmount: async (currency?: 'NGN' | 'USD', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/voucher-min-max`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/voucher-min-max',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VoucherMinMaxAmountApi - functional programming interface
 * @export
 */
export const VoucherMinMaxAmountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VoucherMinMaxAmountApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves minimum and maximum voucher amounts for each currency.
         * @summary Retrieves minimum and maximum voucher amounts
         * @param {VoucherMinMaxAmountApiGetMinMaxAmountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMinMaxAmount(requestParameters: VoucherMinMaxAmountApiGetMinMaxAmountRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoucherMinmaxAmountGetMinMaxAmountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMinMaxAmount(requestParameters.currency, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VoucherMinMaxAmountApi - factory interface
 * @export
 */
export const VoucherMinMaxAmountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VoucherMinMaxAmountApiFp(configuration)
    return {
        /**
         * Retrieves minimum and maximum voucher amounts for each currency.
         * @summary Retrieves minimum and maximum voucher amounts
         * @param {VoucherMinMaxAmountApiGetMinMaxAmountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMinMaxAmount(requestParameters: VoucherMinMaxAmountApiGetMinMaxAmountRequest = {}, options?: AxiosRequestConfig): AxiosPromise<VoucherMinmaxAmountGetMinMaxAmountResponse> {
            return localVarFp.getMinMaxAmount(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMinMaxAmount operation in VoucherMinMaxAmountApi.
 * @export
 * @interface VoucherMinMaxAmountApiGetMinMaxAmountRequest
 */
export type VoucherMinMaxAmountApiGetMinMaxAmountRequest = {
    
    /**
    * Voucher currency
    * @type {'NGN' | 'USD'}
    * @memberof VoucherMinMaxAmountApiGetMinMaxAmount
    */
    readonly currency?: 'NGN' | 'USD'
    
}

/**
 * VoucherMinMaxAmountApiGenerated - object-oriented interface
 * @export
 * @class VoucherMinMaxAmountApiGenerated
 * @extends {BaseAPI}
 */
export class VoucherMinMaxAmountApiGenerated extends BaseAPI {
    /**
     * Retrieves minimum and maximum voucher amounts for each currency.
     * @summary Retrieves minimum and maximum voucher amounts
     * @param {VoucherMinMaxAmountApiGetMinMaxAmountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherMinMaxAmountApiGenerated
     */
    public getMinMaxAmount(requestParameters: VoucherMinMaxAmountApiGetMinMaxAmountRequest = {}, options?: AxiosRequestConfig) {
        return VoucherMinMaxAmountApiFp(this.configuration).getMinMaxAmount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
