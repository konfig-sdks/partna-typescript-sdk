/* tslint:disable */
/* eslint-disable */
/*
Coinprofile business API

Coinprofile business API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiKeyGenerateNewApiKeyRequest } from '../models';
// @ts-ignore
import { ApiKeyGenerateNewApiKeyResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ApiKeyApi - axios parameter creator
 * @export
 */
export const ApiKeyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new api key
         * @summary Create api key
         * @param {ApiKeyGenerateNewApiKeyRequest} apiKeyGenerateNewApiKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateNewApiKey: async (apiKeyGenerateNewApiKeyRequest: ApiKeyGenerateNewApiKeyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKeyGenerateNewApiKeyRequest' is not null or undefined
            assertParamExists('generateNewApiKey', 'apiKeyGenerateNewApiKeyRequest', apiKeyGenerateNewApiKeyRequest)
            const localVarPath = `/auth/api-key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })
            // authentication UserVersion required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-User-Version", keyParamName: "userVersion", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: apiKeyGenerateNewApiKeyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/auth/api-key',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(apiKeyGenerateNewApiKeyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiKeyApi - functional programming interface
 * @export
 */
export const ApiKeyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiKeyApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new api key
         * @summary Create api key
         * @param {ApiKeyApiGenerateNewApiKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateNewApiKey(requestParameters: ApiKeyApiGenerateNewApiKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyGenerateNewApiKeyResponse>> {
            const apiKeyGenerateNewApiKeyRequest: ApiKeyGenerateNewApiKeyRequest = {
                otpType: requestParameters.otpType,
                token: requestParameters.token
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateNewApiKey(apiKeyGenerateNewApiKeyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApiKeyApi - factory interface
 * @export
 */
export const ApiKeyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiKeyApiFp(configuration)
    return {
        /**
         * Create a new api key
         * @summary Create api key
         * @param {ApiKeyApiGenerateNewApiKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateNewApiKey(requestParameters: ApiKeyApiGenerateNewApiKeyRequest, options?: AxiosRequestConfig): AxiosPromise<ApiKeyGenerateNewApiKeyResponse> {
            return localVarFp.generateNewApiKey(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateNewApiKey operation in ApiKeyApi.
 * @export
 * @interface ApiKeyApiGenerateNewApiKeyRequest
 */
export type ApiKeyApiGenerateNewApiKeyRequest = {
    
} & ApiKeyGenerateNewApiKeyRequest

/**
 * ApiKeyApiGenerated - object-oriented interface
 * @export
 * @class ApiKeyApiGenerated
 * @extends {BaseAPI}
 */
export class ApiKeyApiGenerated extends BaseAPI {
    /**
     * Create a new api key
     * @summary Create api key
     * @param {ApiKeyApiGenerateNewApiKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApiGenerated
     */
    public generateNewApiKey(requestParameters: ApiKeyApiGenerateNewApiKeyRequest, options?: AxiosRequestConfig) {
        return ApiKeyApiFp(this.configuration).generateNewApiKey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
