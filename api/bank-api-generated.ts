/* tslint:disable */
/* eslint-disable */
/*
Coinprofile business API

Coinprofile business API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BankGetSupportedBanksResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BankApi - axios parameter creator
 * @export
 */
export const BankApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of supported banks
         * @summary Retrieve a list of supported banks
         * @param {string} [country] The country from which to retrieve supported banks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportedBanks: async (country?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bank/supported`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/bank/supported',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BankApi - functional programming interface
 * @export
 */
export const BankApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BankApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of supported banks
         * @summary Retrieve a list of supported banks
         * @param {BankApiGetSupportedBanksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSupportedBanks(requestParameters: BankApiGetSupportedBanksRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankGetSupportedBanksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSupportedBanks(requestParameters.country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BankApi - factory interface
 * @export
 */
export const BankApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BankApiFp(configuration)
    return {
        /**
         * Retrieve a list of supported banks
         * @summary Retrieve a list of supported banks
         * @param {BankApiGetSupportedBanksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportedBanks(requestParameters: BankApiGetSupportedBanksRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BankGetSupportedBanksResponse> {
            return localVarFp.getSupportedBanks(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSupportedBanks operation in BankApi.
 * @export
 * @interface BankApiGetSupportedBanksRequest
 */
export type BankApiGetSupportedBanksRequest = {
    
    /**
    * The country from which to retrieve supported banks
    * @type {string}
    * @memberof BankApiGetSupportedBanks
    */
    readonly country?: string
    
}

/**
 * BankApiGenerated - object-oriented interface
 * @export
 * @class BankApiGenerated
 * @extends {BaseAPI}
 */
export class BankApiGenerated extends BaseAPI {
    /**
     * Retrieve a list of supported banks
     * @summary Retrieve a list of supported banks
     * @param {BankApiGetSupportedBanksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankApiGenerated
     */
    public getSupportedBanks(requestParameters: BankApiGetSupportedBanksRequest = {}, options?: AxiosRequestConfig) {
        return BankApiFp(this.configuration).getSupportedBanks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
