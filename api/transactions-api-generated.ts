/* tslint:disable */
/* eslint-disable */
/*
Coinprofile business API

Coinprofile business API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TransactionsGetMerchantTransactionSummaryResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export const TransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves transaction summary for the selected currency for a merchant
         * @summary Retrieve merchant transaction summary
         * @param {'NGN' | 'USD'} currency One of supported currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantTransactionSummary: async (currency: 'NGN' | 'USD', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'currency' is not null or undefined
            assertParamExists('getMerchantTransactionSummary', 'currency', currency)
            const localVarPath = `/v1/transactions/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/transactions/summary',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionsApi - functional programming interface
 * @export
 */
export const TransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves transaction summary for the selected currency for a merchant
         * @summary Retrieve merchant transaction summary
         * @param {TransactionsApiGetMerchantTransactionSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMerchantTransactionSummary(requestParameters: TransactionsApiGetMerchantTransactionSummaryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsGetMerchantTransactionSummaryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMerchantTransactionSummary(requestParameters.currency, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TransactionsApi - factory interface
 * @export
 */
export const TransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionsApiFp(configuration)
    return {
        /**
         * Retrieves transaction summary for the selected currency for a merchant
         * @summary Retrieve merchant transaction summary
         * @param {TransactionsApiGetMerchantTransactionSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantTransactionSummary(requestParameters: TransactionsApiGetMerchantTransactionSummaryRequest, options?: AxiosRequestConfig): AxiosPromise<TransactionsGetMerchantTransactionSummaryResponse> {
            return localVarFp.getMerchantTransactionSummary(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMerchantTransactionSummary operation in TransactionsApi.
 * @export
 * @interface TransactionsApiGetMerchantTransactionSummaryRequest
 */
export type TransactionsApiGetMerchantTransactionSummaryRequest = {
    
    /**
    * One of supported currencies
    * @type {'NGN' | 'USD'}
    * @memberof TransactionsApiGetMerchantTransactionSummary
    */
    readonly currency: 'NGN' | 'USD'
    
}

/**
 * TransactionsApiGenerated - object-oriented interface
 * @export
 * @class TransactionsApiGenerated
 * @extends {BaseAPI}
 */
export class TransactionsApiGenerated extends BaseAPI {
    /**
     * Retrieves transaction summary for the selected currency for a merchant
     * @summary Retrieve merchant transaction summary
     * @param {TransactionsApiGetMerchantTransactionSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiGenerated
     */
    public getMerchantTransactionSummary(requestParameters: TransactionsApiGetMerchantTransactionSummaryRequest, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).getMerchantTransactionSummary(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
