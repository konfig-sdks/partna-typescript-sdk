/* tslint:disable */
/* eslint-disable */
/*
Coinprofile business API

Coinprofile business API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { MerchantsGetRecordResponse } from '../models';
// @ts-ignore
import { MerchantsUpdateRecordRequest } from '../models';
// @ts-ignore
import { MerchantsUpdateRecordResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MerchantsApi - axios parameter creator
 * @export
 */
export const MerchantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves merchant record - username, email, callback URL, merchant logo, creditCurrency, API key expiry date-time
         * @summary Retrieve merchant record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/merchants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/merchants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates merchant record
         * @summary Update merchant record
         * @param {MerchantsUpdateRecordRequest} merchantsUpdateRecordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecord: async (merchantsUpdateRecordRequest: MerchantsUpdateRecordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantsUpdateRecordRequest' is not null or undefined
            assertParamExists('updateRecord', 'merchantsUpdateRecordRequest', merchantsUpdateRecordRequest)
            const localVarPath = `/v1/merchants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: merchantsUpdateRecordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/merchants',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(merchantsUpdateRecordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MerchantsApi - functional programming interface
 * @export
 */
export const MerchantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves merchant record - username, email, callback URL, merchant logo, creditCurrency, API key expiry date-time
         * @summary Retrieve merchant record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecord(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantsGetRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecord(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates merchant record
         * @summary Update merchant record
         * @param {MerchantsApiUpdateRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRecord(requestParameters: MerchantsApiUpdateRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantsUpdateRecordResponse>> {
            const merchantsUpdateRecordRequest: MerchantsUpdateRecordRequest = {
                callbackUrl: requestParameters.callbackUrl,
                creditCurrency: requestParameters.creditCurrency,
                feeBearer: requestParameters.feeBearer,
                logo: requestParameters.logo
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRecord(merchantsUpdateRecordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MerchantsApi - factory interface
 * @export
 */
export const MerchantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MerchantsApiFp(configuration)
    return {
        /**
         * Retrieves merchant record - username, email, callback URL, merchant logo, creditCurrency, API key expiry date-time
         * @summary Retrieve merchant record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord(options?: AxiosRequestConfig): AxiosPromise<MerchantsGetRecordResponse> {
            return localVarFp.getRecord(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates merchant record
         * @summary Update merchant record
         * @param {MerchantsApiUpdateRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecord(requestParameters: MerchantsApiUpdateRecordRequest, options?: AxiosRequestConfig): AxiosPromise<MerchantsUpdateRecordResponse> {
            return localVarFp.updateRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for updateRecord operation in MerchantsApi.
 * @export
 * @interface MerchantsApiUpdateRecordRequest
 */
export type MerchantsApiUpdateRecordRequest = {
    
} & MerchantsUpdateRecordRequest

/**
 * MerchantsApiGenerated - object-oriented interface
 * @export
 * @class MerchantsApiGenerated
 * @extends {BaseAPI}
 */
export class MerchantsApiGenerated extends BaseAPI {
    /**
     * Retrieves merchant record - username, email, callback URL, merchant logo, creditCurrency, API key expiry date-time
     * @summary Retrieve merchant record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApiGenerated
     */
    public getRecord(options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).getRecord(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates merchant record
     * @summary Update merchant record
     * @param {MerchantsApiUpdateRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApiGenerated
     */
    public updateRecord(requestParameters: MerchantsApiUpdateRecordRequest, options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).updateRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
