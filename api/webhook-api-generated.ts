/* tslint:disable */
/* eslint-disable */
/*
Coinprofile business API

Coinprofile business API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { WebhookGetCallbackUrlResponse } from '../models';
// @ts-ignore
import { WebhookSubscribeWebhookCallbackRequest } from '../models';
// @ts-ignore
import { WebhookSubscribeWebhookCallbackResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WebhookApi - axios parameter creator
 * @export
 */
export const WebhookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the callback url used as webhook
         * @summary Retrieve subscribed webhook url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallbackUrl: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/callbackurl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })
            // authentication UserVersion required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-User-Version", keyParamName: "userVersion", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/callbackurl',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the callback url that will be used as webhook
         * @summary Subscribe to webhook
         * @param {WebhookSubscribeWebhookCallbackRequest} webhookSubscribeWebhookCallbackRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeWebhookCallback: async (webhookSubscribeWebhookCallbackRequest: WebhookSubscribeWebhookCallbackRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookSubscribeWebhookCallbackRequest' is not null or undefined
            assertParamExists('subscribeWebhookCallback', 'webhookSubscribeWebhookCallbackRequest', webhookSubscribeWebhookCallbackRequest)
            const localVarPath = `/callbackurl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })
            // authentication UserVersion required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-User-Version", keyParamName: "userVersion", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhookSubscribeWebhookCallbackRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/callbackurl',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhookSubscribeWebhookCallbackRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhookApi - functional programming interface
 * @export
 */
export const WebhookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhookApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve the callback url used as webhook
         * @summary Retrieve subscribed webhook url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCallbackUrl(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookGetCallbackUrlResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCallbackUrl(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set the callback url that will be used as webhook
         * @summary Subscribe to webhook
         * @param {WebhookApiSubscribeWebhookCallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscribeWebhookCallback(requestParameters: WebhookApiSubscribeWebhookCallbackRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookSubscribeWebhookCallbackResponse>> {
            const webhookSubscribeWebhookCallbackRequest: WebhookSubscribeWebhookCallbackRequest = {
                callbackUrl: requestParameters.callbackUrl
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscribeWebhookCallback(webhookSubscribeWebhookCallbackRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhookApi - factory interface
 * @export
 */
export const WebhookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhookApiFp(configuration)
    return {
        /**
         * Retrieve the callback url used as webhook
         * @summary Retrieve subscribed webhook url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallbackUrl(options?: AxiosRequestConfig): AxiosPromise<WebhookGetCallbackUrlResponse> {
            return localVarFp.getCallbackUrl(options).then((request) => request(axios, basePath));
        },
        /**
         * Set the callback url that will be used as webhook
         * @summary Subscribe to webhook
         * @param {WebhookApiSubscribeWebhookCallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeWebhookCallback(requestParameters: WebhookApiSubscribeWebhookCallbackRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookSubscribeWebhookCallbackResponse> {
            return localVarFp.subscribeWebhookCallback(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for subscribeWebhookCallback operation in WebhookApi.
 * @export
 * @interface WebhookApiSubscribeWebhookCallbackRequest
 */
export type WebhookApiSubscribeWebhookCallbackRequest = {
    
} & WebhookSubscribeWebhookCallbackRequest

/**
 * WebhookApiGenerated - object-oriented interface
 * @export
 * @class WebhookApiGenerated
 * @extends {BaseAPI}
 */
export class WebhookApiGenerated extends BaseAPI {
    /**
     * Retrieve the callback url used as webhook
     * @summary Retrieve subscribed webhook url
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiGenerated
     */
    public getCallbackUrl(options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).getCallbackUrl(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the callback url that will be used as webhook
     * @summary Subscribe to webhook
     * @param {WebhookApiSubscribeWebhookCallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiGenerated
     */
    public subscribeWebhookCallback(requestParameters: WebhookApiSubscribeWebhookCallbackRequest, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).subscribeWebhookCallback(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
