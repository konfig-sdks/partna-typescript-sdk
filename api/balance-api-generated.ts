/* tslint:disable */
/* eslint-disable */
/*
Coinprofile business API

Coinprofile business API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BalanceGetAccountBalance200Response } from '../models';
// @ts-ignore
import { BalanceGetAccountBalanceResponse } from '../models';
// @ts-ignore
import { BalanceTransferFundsRequest } from '../models';
// @ts-ignore
import { BalanceTransferFundsResponse } from '../models';
// @ts-ignore
import { BalanceWithdrawFundsRequest } from '../models';
// @ts-ignore
import { BalanceWithdrawFundsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BalanceApi - axios parameter creator
 * @export
 */
export const BalanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves account balance for the selected currency
         * @summary Retrieve merchant account balance
         * @param {'NGN' | 'USD'} currency One of supported currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountBalance: async (currency: 'NGN' | 'USD', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'currency' is not null or undefined
            assertParamExists('getAccountBalance', 'currency', currency)
            const localVarPath = `/v1/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/balance',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves account balance for each currency
         * @summary Retrieve user\'s account balance
         * @param {'NGN' | 'USD' | 'USDT'} [currency] Currency for which balance is to be retrieved. When this is not supplied, balance will be retrieved for all available currencies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountBalance_1: async (currency?: 'NGN' | 'USD' | 'USDT', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })
            // authentication UserVersion required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-User-Version", keyParamName: "userVersion", configuration })
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/balance',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfer funds from user\'s balance to another user (fiat-to-fiat)
         * @summary Transfer funds
         * @param {BalanceTransferFundsRequest} balanceTransferFundsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferFunds: async (balanceTransferFundsRequest: BalanceTransferFundsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'balanceTransferFundsRequest' is not null or undefined
            assertParamExists('transferFunds', 'balanceTransferFundsRequest', balanceTransferFundsRequest)
            const localVarPath = `/balance/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })
            // authentication UserVersion required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-User-Version", keyParamName: "userVersion", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: balanceTransferFundsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/balance/transfer',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(balanceTransferFundsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Withdraw funds from the user\'s balance
         * @summary Withdraw balance
         * @param {BalanceWithdrawFundsRequest} balanceWithdrawFundsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawFunds: async (balanceWithdrawFundsRequest: BalanceWithdrawFundsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'balanceWithdrawFundsRequest' is not null or undefined
            assertParamExists('withdrawFunds', 'balanceWithdrawFundsRequest', balanceWithdrawFundsRequest)
            const localVarPath = `/balance/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })
            // authentication UserVersion required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-User-Version", keyParamName: "userVersion", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: balanceWithdrawFundsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/balance/withdraw',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(balanceWithdrawFundsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BalanceApi - functional programming interface
 * @export
 */
export const BalanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BalanceApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves account balance for the selected currency
         * @summary Retrieve merchant account balance
         * @param {BalanceApiGetAccountBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountBalance(requestParameters: BalanceApiGetAccountBalanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BalanceGetAccountBalanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountBalance(requestParameters.currency, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves account balance for each currency
         * @summary Retrieve user\'s account balance
         * @param {BalanceApiGetAccountBalance0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountBalance_1(requestParameters: BalanceApiGetAccountBalance0Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BalanceGetAccountBalance200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountBalance_1(requestParameters.currency, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Transfer funds from user\'s balance to another user (fiat-to-fiat)
         * @summary Transfer funds
         * @param {BalanceApiTransferFundsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferFunds(requestParameters: BalanceApiTransferFundsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BalanceTransferFundsResponse>> {
            const balanceTransferFundsRequest: BalanceTransferFundsRequest = {
                amount: requestParameters.amount,
                currency: requestParameters.currency,
                memo: requestParameters.memo,
                otpType: requestParameters.otpType,
                receiverUsername: requestParameters.receiverUsername,
                token: requestParameters.token
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferFunds(balanceTransferFundsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Withdraw funds from the user\'s balance
         * @summary Withdraw balance
         * @param {BalanceApiWithdrawFundsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async withdrawFunds(requestParameters: BalanceApiWithdrawFundsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BalanceWithdrawFundsResponse>> {
            const balanceWithdrawFundsRequest: BalanceWithdrawFundsRequest = {
                accountName: requestParameters.accountName,
                accountNumber: requestParameters.accountNumber,
                amount: requestParameters.amount,
                bank: requestParameters.bank,
                bankCode: requestParameters.bankCode,
                currency: requestParameters.currency,
                otpType: requestParameters.otpType,
                token: requestParameters.token
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.withdrawFunds(balanceWithdrawFundsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BalanceApi - factory interface
 * @export
 */
export const BalanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BalanceApiFp(configuration)
    return {
        /**
         * Retrieves account balance for the selected currency
         * @summary Retrieve merchant account balance
         * @param {BalanceApiGetAccountBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountBalance(requestParameters: BalanceApiGetAccountBalanceRequest, options?: AxiosRequestConfig): AxiosPromise<BalanceGetAccountBalanceResponse> {
            return localVarFp.getAccountBalance(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves account balance for each currency
         * @summary Retrieve user\'s account balance
         * @param {BalanceApiGetAccountBalance0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountBalance_1(requestParameters: BalanceApiGetAccountBalance0Request = {}, options?: AxiosRequestConfig): AxiosPromise<BalanceGetAccountBalance200Response> {
            return localVarFp.getAccountBalance_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfer funds from user\'s balance to another user (fiat-to-fiat)
         * @summary Transfer funds
         * @param {BalanceApiTransferFundsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferFunds(requestParameters: BalanceApiTransferFundsRequest, options?: AxiosRequestConfig): AxiosPromise<BalanceTransferFundsResponse> {
            return localVarFp.transferFunds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Withdraw funds from the user\'s balance
         * @summary Withdraw balance
         * @param {BalanceApiWithdrawFundsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawFunds(requestParameters: BalanceApiWithdrawFundsRequest, options?: AxiosRequestConfig): AxiosPromise<BalanceWithdrawFundsResponse> {
            return localVarFp.withdrawFunds(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAccountBalance operation in BalanceApi.
 * @export
 * @interface BalanceApiGetAccountBalanceRequest
 */
export type BalanceApiGetAccountBalanceRequest = {
    
    /**
    * One of supported currencies
    * @type {'NGN' | 'USD'}
    * @memberof BalanceApiGetAccountBalance
    */
    readonly currency: 'NGN' | 'USD'
    
}

/**
 * Request parameters for getAccountBalance_1 operation in BalanceApi.
 * @export
 * @interface BalanceApiGetAccountBalance0Request
 */
export type BalanceApiGetAccountBalance0Request = {
    
    /**
    * Currency for which balance is to be retrieved. When this is not supplied, balance will be retrieved for all available currencies.
    * @type {'NGN' | 'USD' | 'USDT'}
    * @memberof BalanceApiGetAccountBalance0
    */
    readonly currency?: 'NGN' | 'USD' | 'USDT'
    
}

/**
 * Request parameters for transferFunds operation in BalanceApi.
 * @export
 * @interface BalanceApiTransferFundsRequest
 */
export type BalanceApiTransferFundsRequest = {
    
} & BalanceTransferFundsRequest

/**
 * Request parameters for withdrawFunds operation in BalanceApi.
 * @export
 * @interface BalanceApiWithdrawFundsRequest
 */
export type BalanceApiWithdrawFundsRequest = {
    
} & BalanceWithdrawFundsRequest

/**
 * BalanceApiGenerated - object-oriented interface
 * @export
 * @class BalanceApiGenerated
 * @extends {BaseAPI}
 */
export class BalanceApiGenerated extends BaseAPI {
    /**
     * Retrieves account balance for the selected currency
     * @summary Retrieve merchant account balance
     * @param {BalanceApiGetAccountBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalanceApiGenerated
     */
    public getAccountBalance(requestParameters: BalanceApiGetAccountBalanceRequest, options?: AxiosRequestConfig) {
        return BalanceApiFp(this.configuration).getAccountBalance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves account balance for each currency
     * @summary Retrieve user\'s account balance
     * @param {BalanceApiGetAccountBalance0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalanceApiGenerated
     */
    public getAccountBalance_1(requestParameters: BalanceApiGetAccountBalance0Request = {}, options?: AxiosRequestConfig) {
        return BalanceApiFp(this.configuration).getAccountBalance_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transfer funds from user\'s balance to another user (fiat-to-fiat)
     * @summary Transfer funds
     * @param {BalanceApiTransferFundsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalanceApiGenerated
     */
    public transferFunds(requestParameters: BalanceApiTransferFundsRequest, options?: AxiosRequestConfig) {
        return BalanceApiFp(this.configuration).transferFunds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Withdraw funds from the user\'s balance
     * @summary Withdraw balance
     * @param {BalanceApiWithdrawFundsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalanceApiGenerated
     */
    public withdrawFunds(requestParameters: BalanceApiWithdrawFundsRequest, options?: AxiosRequestConfig) {
        return BalanceApiFp(this.configuration).withdrawFunds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
