/* tslint:disable */
/* eslint-disable */
/*
Coinprofile business API

Coinprofile business API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PaymentCreateNewPaymentRequest } from '../models';
// @ts-ignore
import { PaymentCreateNewPaymentResponse } from '../models';
// @ts-ignore
import { PaymentGetSingleResponse } from '../models';
// @ts-ignore
import { PaymentResolveOverpaidTransactionResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PaymentApi - axios parameter creator
 * @export
 */
export const PaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new payment
         * @summary Create payment
         * @param {PaymentCreateNewPaymentRequest} paymentCreateNewPaymentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewPayment: async (paymentCreateNewPaymentRequest: PaymentCreateNewPaymentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentCreateNewPaymentRequest' is not null or undefined
            assertParamExists('createNewPayment', 'paymentCreateNewPaymentRequest', paymentCreateNewPaymentRequest)
            const localVarPath = `/payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })
            // authentication UserVersion required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-User-Version", keyParamName: "userVersion", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: paymentCreateNewPaymentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payment',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(paymentCreateNewPaymentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single payment
         * @summary Get a single payment
         * @param {string} paymentId The ID of the created payment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (paymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentId' is not null or undefined
            assertParamExists('getSingle', 'paymentId', paymentId)
            const localVarPath = `/payment/{paymentId}`
                .replace(`{${"paymentId"}}`, encodeURIComponent(String(paymentId !== undefined ? paymentId : `-paymentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            // authentication ApiUser required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-User", keyParamName: "apiUser", configuration })
            // authentication UserVersion required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-User-Version", keyParamName: "userVersion", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payment/{paymentId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resolve overpaid Transaction
         * @summary Resolve overpaid Transaction
         * @param {string} id The ID of the unresolved transaction
         * @param {'refundexcess' | 'payall'} option This is the way you want the transaction to be completed. Either refundExcess or PayAll option
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveOverpaidTransaction: async (id: string, option: 'refundexcess' | 'payall', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resolveOverpaidTransaction', 'id', id)
            // verify required parameter 'option' is not null or undefined
            assertParamExists('resolveOverpaidTransaction', 'option', option)
            const localVarPath = `/payment/resolve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (option !== undefined) {
                localVarQueryParameter['option'] = option;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payment/resolve',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new payment
         * @summary Create payment
         * @param {PaymentApiCreateNewPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewPayment(requestParameters: PaymentApiCreateNewPaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentCreateNewPaymentResponse>> {
            const paymentCreateNewPaymentRequest: PaymentCreateNewPaymentRequest = {
                accountName: requestParameters.accountName,
                accountNumber: requestParameters.accountNumber,
                bank: requestParameters.bank,
                bankCode: requestParameters.bankCode,
                businessId: requestParameters.businessId,
                coinprofileUsername: requestParameters.coinprofileUsername,
                country: requestParameters.country,
                customerEmail: requestParameters.customerEmail,
                incomingAmount: requestParameters.incomingAmount,
                incomingCurrency: requestParameters.incomingCurrency,
                outgoingAmount: requestParameters.outgoingAmount,
                outgoingCurrency: requestParameters.outgoingCurrency,
                paymentType: requestParameters.paymentType,
                rateKey: requestParameters.rateKey,
                reference: requestParameters.reference
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewPayment(paymentCreateNewPaymentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a single payment
         * @summary Get a single payment
         * @param {PaymentApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: PaymentApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentGetSingleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.paymentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Resolve overpaid Transaction
         * @summary Resolve overpaid Transaction
         * @param {PaymentApiResolveOverpaidTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolveOverpaidTransaction(requestParameters: PaymentApiResolveOverpaidTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentResolveOverpaidTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resolveOverpaidTransaction(requestParameters.id, requestParameters.option, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentApiFp(configuration)
    return {
        /**
         * Create a new payment
         * @summary Create payment
         * @param {PaymentApiCreateNewPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewPayment(requestParameters: PaymentApiCreateNewPaymentRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentCreateNewPaymentResponse> {
            return localVarFp.createNewPayment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single payment
         * @summary Get a single payment
         * @param {PaymentApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: PaymentApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentGetSingleResponse> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Resolve overpaid Transaction
         * @summary Resolve overpaid Transaction
         * @param {PaymentApiResolveOverpaidTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveOverpaidTransaction(requestParameters: PaymentApiResolveOverpaidTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentResolveOverpaidTransactionResponse> {
            return localVarFp.resolveOverpaidTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewPayment operation in PaymentApi.
 * @export
 * @interface PaymentApiCreateNewPaymentRequest
 */
export type PaymentApiCreateNewPaymentRequest = {
    
} & PaymentCreateNewPaymentRequest

/**
 * Request parameters for getSingle operation in PaymentApi.
 * @export
 * @interface PaymentApiGetSingleRequest
 */
export type PaymentApiGetSingleRequest = {
    
    /**
    * The ID of the created payment
    * @type {string}
    * @memberof PaymentApiGetSingle
    */
    readonly paymentId: string
    
}

/**
 * Request parameters for resolveOverpaidTransaction operation in PaymentApi.
 * @export
 * @interface PaymentApiResolveOverpaidTransactionRequest
 */
export type PaymentApiResolveOverpaidTransactionRequest = {
    
    /**
    * The ID of the unresolved transaction
    * @type {string}
    * @memberof PaymentApiResolveOverpaidTransaction
    */
    readonly id: string
    
    /**
    * This is the way you want the transaction to be completed. Either refundExcess or PayAll option
    * @type {'refundexcess' | 'payall'}
    * @memberof PaymentApiResolveOverpaidTransaction
    */
    readonly option: 'refundexcess' | 'payall'
    
}

/**
 * PaymentApiGenerated - object-oriented interface
 * @export
 * @class PaymentApiGenerated
 * @extends {BaseAPI}
 */
export class PaymentApiGenerated extends BaseAPI {
    /**
     * Create a new payment
     * @summary Create payment
     * @param {PaymentApiCreateNewPaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiGenerated
     */
    public createNewPayment(requestParameters: PaymentApiCreateNewPaymentRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).createNewPayment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single payment
     * @summary Get a single payment
     * @param {PaymentApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiGenerated
     */
    public getSingle(requestParameters: PaymentApiGetSingleRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resolve overpaid Transaction
     * @summary Resolve overpaid Transaction
     * @param {PaymentApiResolveOverpaidTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiGenerated
     */
    public resolveOverpaidTransaction(requestParameters: PaymentApiResolveOverpaidTransactionRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).resolveOverpaidTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
